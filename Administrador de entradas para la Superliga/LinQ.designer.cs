#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Administrador_de_entradas_para_la_Superliga
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TP-VD")]
	public partial class LinQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertBillet(Billet instance);
    partial void UpdateBillet(Billet instance);
    partial void DeleteBillet(Billet instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertSocios(Socios instance);
    partial void UpdateSocios(Socios instance);
    partial void DeleteSocios(Socios instance);
    partial void InsertTribunes(Tribunes instance);
    partial void UpdateTribunes(Tribunes instance);
    partial void DeleteTribunes(Tribunes instance);
    #endregion
		
		public LinQDataContext() : 
				base(global::Administrador_de_entradas_para_la_Superliga.Properties.Settings.Default.TP_VDConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Billet> Billet
		{
			get
			{
				return this.GetTable<Billet>();
			}
		}
		
		public System.Data.Linq.Table<Match> Match
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<Socios> Socios
		{
			get
			{
				return this.GetTable<Socios>();
			}
		}
		
		public System.Data.Linq.Table<Tribunes> Tribunes
		{
			get
			{
				return this.GetTable<Tribunes>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Billet")]
	public partial class Billet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _int;
		
		private string _numSocio;
		
		private int _idPlace;
		
		private int _idMatch;
		
		private EntityRef<Socios> _Socios;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnintChanging(int value);
    partial void OnintChanged();
    partial void OnnumSocioChanging(string value);
    partial void OnnumSocioChanged();
    partial void OnidPlaceChanging(int value);
    partial void OnidPlaceChanged();
    partial void OnidMatchChanging(int value);
    partial void OnidMatchChanged();
    #endregion
		
		public Billet()
		{
			this._Socios = default(EntityRef<Socios>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="int", Storage="_int", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int @int
		{
			get
			{
				return this._int;
			}
			set
			{
				if ((this._int != value))
				{
					this.OnintChanging(value);
					this.SendPropertyChanging();
					this._int = value;
					this.SendPropertyChanged("@int");
					this.OnintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numSocio", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string numSocio
		{
			get
			{
				return this._numSocio;
			}
			set
			{
				if ((this._numSocio != value))
				{
					if (this._Socios.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnumSocioChanging(value);
					this.SendPropertyChanging();
					this._numSocio = value;
					this.SendPropertyChanged("numSocio");
					this.OnnumSocioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPlace", DbType="Int NOT NULL")]
		public int idPlace
		{
			get
			{
				return this._idPlace;
			}
			set
			{
				if ((this._idPlace != value))
				{
					this.OnidPlaceChanging(value);
					this.SendPropertyChanging();
					this._idPlace = value;
					this.SendPropertyChanged("idPlace");
					this.OnidPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMatch", DbType="Int NOT NULL")]
		public int idMatch
		{
			get
			{
				return this._idMatch;
			}
			set
			{
				if ((this._idMatch != value))
				{
					this.OnidMatchChanging(value);
					this.SendPropertyChanging();
					this._idMatch = value;
					this.SendPropertyChanged("idMatch");
					this.OnidMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Socios_Billet", Storage="_Socios", ThisKey="numSocio", OtherKey="numSocio", IsForeignKey=true)]
		public Socios Socios
		{
			get
			{
				return this._Socios.Entity;
			}
			set
			{
				Socios previousValue = this._Socios.Entity;
				if (((previousValue != value) 
							|| (this._Socios.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Socios.Entity = null;
						previousValue.Billet.Remove(this);
					}
					this._Socios.Entity = value;
					if ((value != null))
					{
						value.Billet.Add(this);
						this._numSocio = value.numSocio;
					}
					else
					{
						this._numSocio = default(string);
					}
					this.SendPropertyChanged("Socios");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _intitule;
		
		private double _coefMatch;
		
		private System.DateTime _date;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnintituleChanging(string value);
    partial void OnintituleChanged();
    partial void OncoefMatchChanging(double value);
    partial void OncoefMatchChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public Match()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_intitule", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string intitule
		{
			get
			{
				return this._intitule;
			}
			set
			{
				if ((this._intitule != value))
				{
					this.OnintituleChanging(value);
					this.SendPropertyChanging();
					this._intitule = value;
					this.SendPropertyChanged("intitule");
					this.OnintituleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coefMatch", DbType="Float NOT NULL")]
		public double coefMatch
		{
			get
			{
				return this._coefMatch;
			}
			set
			{
				if ((this._coefMatch != value))
				{
					this.OncoefMatchChanging(value);
					this.SendPropertyChanging();
					this._coefMatch = value;
					this.SendPropertyChanged("coefMatch");
					this.OncoefMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Socios")]
	public partial class Socios : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _numSocio;
		
		private string _nom;
		
		private string _prenom;
		
		private string _adresse;
		
		private string _codePostal;
		
		private string _telephone;
		
		private string _mdp;
		
		private EntitySet<Billet> _Billet;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnumSocioChanging(string value);
    partial void OnnumSocioChanged();
    partial void OnnomChanging(string value);
    partial void OnnomChanged();
    partial void OnprenomChanging(string value);
    partial void OnprenomChanged();
    partial void OnadresseChanging(string value);
    partial void OnadresseChanged();
    partial void OncodePostalChanging(string value);
    partial void OncodePostalChanged();
    partial void OntelephoneChanging(string value);
    partial void OntelephoneChanged();
    partial void OnmdpChanging(string value);
    partial void OnmdpChanged();
    #endregion
		
		public Socios()
		{
			this._Billet = new EntitySet<Billet>(new Action<Billet>(this.attach_Billet), new Action<Billet>(this.detach_Billet));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numSocio", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string numSocio
		{
			get
			{
				return this._numSocio;
			}
			set
			{
				if ((this._numSocio != value))
				{
					this.OnnumSocioChanging(value);
					this.SendPropertyChanging();
					this._numSocio = value;
					this.SendPropertyChanged("numSocio");
					this.OnnumSocioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string nom
		{
			get
			{
				return this._nom;
			}
			set
			{
				if ((this._nom != value))
				{
					this.OnnomChanging(value);
					this.SendPropertyChanging();
					this._nom = value;
					this.SendPropertyChanged("nom");
					this.OnnomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prenom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string prenom
		{
			get
			{
				return this._prenom;
			}
			set
			{
				if ((this._prenom != value))
				{
					this.OnprenomChanging(value);
					this.SendPropertyChanging();
					this._prenom = value;
					this.SendPropertyChanged("prenom");
					this.OnprenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adresse", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string adresse
		{
			get
			{
				return this._adresse;
			}
			set
			{
				if ((this._adresse != value))
				{
					this.OnadresseChanging(value);
					this.SendPropertyChanging();
					this._adresse = value;
					this.SendPropertyChanged("adresse");
					this.OnadresseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codePostal", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string codePostal
		{
			get
			{
				return this._codePostal;
			}
			set
			{
				if ((this._codePostal != value))
				{
					this.OncodePostalChanging(value);
					this.SendPropertyChanging();
					this._codePostal = value;
					this.SendPropertyChanged("codePostal");
					this.OncodePostalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telephone", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string telephone
		{
			get
			{
				return this._telephone;
			}
			set
			{
				if ((this._telephone != value))
				{
					this.OntelephoneChanging(value);
					this.SendPropertyChanging();
					this._telephone = value;
					this.SendPropertyChanged("telephone");
					this.OntelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mdp", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string mdp
		{
			get
			{
				return this._mdp;
			}
			set
			{
				if ((this._mdp != value))
				{
					this.OnmdpChanging(value);
					this.SendPropertyChanging();
					this._mdp = value;
					this.SendPropertyChanged("mdp");
					this.OnmdpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Socios_Billet", Storage="_Billet", ThisKey="numSocio", OtherKey="numSocio")]
		public EntitySet<Billet> Billet
		{
			get
			{
				return this._Billet;
			}
			set
			{
				this._Billet.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Billet(Billet entity)
		{
			this.SendPropertyChanging();
			entity.Socios = this;
		}
		
		private void detach_Billet(Billet entity)
		{
			this.SendPropertyChanging();
			entity.Socios = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tribunes")]
	public partial class Tribunes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _nom;
		
		private int _capacite;
		
		private double _prix;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnomChanging(string value);
    partial void OnnomChanged();
    partial void OncapaciteChanging(int value);
    partial void OncapaciteChanged();
    partial void OnprixChanging(double value);
    partial void OnprixChanged();
    #endregion
		
		public Tribunes()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string nom
		{
			get
			{
				return this._nom;
			}
			set
			{
				if ((this._nom != value))
				{
					this.OnnomChanging(value);
					this.SendPropertyChanging();
					this._nom = value;
					this.SendPropertyChanged("nom");
					this.OnnomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capacite", DbType="Int NOT NULL")]
		public int capacite
		{
			get
			{
				return this._capacite;
			}
			set
			{
				if ((this._capacite != value))
				{
					this.OncapaciteChanging(value);
					this.SendPropertyChanging();
					this._capacite = value;
					this.SendPropertyChanged("capacite");
					this.OncapaciteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prix", DbType="Float NOT NULL")]
		public double prix
		{
			get
			{
				return this._prix;
			}
			set
			{
				if ((this._prix != value))
				{
					this.OnprixChanging(value);
					this.SendPropertyChanging();
					this._prix = value;
					this.SendPropertyChanged("prix");
					this.OnprixChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
